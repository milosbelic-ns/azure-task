name: Build and Deploy to AKS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AZURE_CONTAINER_REGISTRY: "acrmilos"
  CLUSTER_NAME: "aks-devops-task"
  RESOURCE_GROUP: "Milos-Belic-Candidate"
  APP_NAME: "hello-world"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    # 1. Checkout code
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 3. Log in to Azure
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # 4. Log in to ACR
    - name: Log in to ACR
      run: |
        az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}

    # 5. Build and push Docker image
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./app
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.APP_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # 6. Get AKS credentials
    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CLUSTER_NAME }} \
          --overwrite-existing

    # 7. Deploy to AKS with Helm
    - name: Deploy to AKS
      run: |
        helm upgrade --install ${{ env.APP_NAME }} ./helm/hello-world \
          --set image.repository=${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.APP_NAME }} \
          --set image.tag=${{ github.sha }} \
          --namespace default \
          --create-namespace \
          --atomic \
          --timeout 5m